/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Firebase.Firestore {

internal sealed class FirestoreCpp {
  public static ListenerRegistrationProxy AddDocumentSnapshotListener(DocumentReferenceProxy reference, MetadataChangesProxy metadataChanges, int callbackId, Firebase.Firestore.DocumentReference.ListenerDelegate callback) {
    ListenerRegistrationProxy ret = new ListenerRegistrationProxy(FirestoreCppPINVOKE.AddDocumentSnapshotListener(DocumentReferenceProxy.getCPtr(reference), (int)metadataChanges, callbackId, callback), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool QueryEquals(QueryProxy lhs, QueryProxy rhs) {
    bool ret = FirestoreCppPINVOKE.QueryEquals(QueryProxy.getCPtr(lhs), QueryProxy.getCPtr(rhs));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool QuerySnapshotEquals(QuerySnapshotProxy lhs, QuerySnapshotProxy rhs) {
    bool ret = FirestoreCppPINVOKE.QuerySnapshotEquals(QuerySnapshotProxy.getCPtr(lhs), QuerySnapshotProxy.getCPtr(rhs));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DocumentSnapshotEquals(DocumentSnapshotProxy lhs, DocumentSnapshotProxy rhs) {
    bool ret = FirestoreCppPINVOKE.DocumentSnapshotEquals(DocumentSnapshotProxy.getCPtr(lhs), DocumentSnapshotProxy.getCPtr(rhs));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DocumentChangeEquals(DocumentChangeProxy lhs, DocumentChangeProxy rhs) {
    bool ret = FirestoreCppPINVOKE.DocumentChangeEquals(DocumentChangeProxy.getCPtr(lhs), DocumentChangeProxy.getCPtr(rhs));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int QueryHashCode(QueryProxy query) {
    int ret = FirestoreCppPINVOKE.QueryHashCode(QueryProxy.getCPtr(query));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int QuerySnapshotHashCode(QuerySnapshotProxy snapshot) {
    int ret = FirestoreCppPINVOKE.QuerySnapshotHashCode(QuerySnapshotProxy.getCPtr(snapshot));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int DocumentSnapshotHashCode(DocumentSnapshotProxy snapshot) {
    int ret = FirestoreCppPINVOKE.DocumentSnapshotHashCode(DocumentSnapshotProxy.getCPtr(snapshot));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int DocumentChangeHashCode(DocumentChangeProxy change) {
    int ret = FirestoreCppPINVOKE.DocumentChangeHashCode(DocumentChangeProxy.getCPtr(change));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ListenerRegistrationProxy AddQuerySnapshotListener(QueryProxy query, MetadataChangesProxy metadataChanges, int callbackId, Firebase.Firestore.Query.ListenerDelegate callback) {
    ListenerRegistrationProxy ret = new ListenerRegistrationProxy(FirestoreCppPINVOKE.AddQuerySnapshotListener(QueryProxy.getCPtr(query), (int)metadataChanges, callbackId, callback), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ListenerRegistrationProxy AddSnapshotsInSyncListener(FirestoreProxy firestore, int callbackId, Firebase.Firestore.FirebaseFirestore.SnapshotsInSyncDelegate callback) {
    ListenerRegistrationProxy ret = new ListenerRegistrationProxy(FirestoreCppPINVOKE.AddSnapshotsInSyncListener(FirestoreProxy.getCPtr(firestore), callbackId, callback), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static System.Threading.Tasks.Task<LoadBundleTaskProgressProxy> LoadBundleAsync(FirestoreProxy firestore, string bundleData) {
    var future = FirestoreCppPINVOKE.LoadBundle__SWIG_0(FirestoreProxy.getCPtr(firestore), bundleData);
    
      if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return Future_LoadBundleTaskProgress.GetTask(new Future_LoadBundleTaskProgress(future, true));
  }

  public static System.Threading.Tasks.Task<LoadBundleTaskProgressProxy> LoadBundleAsync(FirestoreProxy firestore, string bundleData, int callbackId, Firebase.Firestore.FirebaseFirestore.LoadBundleTaskProgressDelegate callback) {
    var future = FirestoreCppPINVOKE.LoadBundle__SWIG_1(FirestoreProxy.getCPtr(firestore), bundleData, callbackId, callback);
    
      if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return Future_LoadBundleTaskProgress.GetTask(new Future_LoadBundleTaskProgress(future, true));
  }

  public static FieldToValueMap ConvertFieldValueToMap(FieldValueProxy fieldValue) {
    FieldToValueMap ret = new FieldToValueMap(FirestoreCppPINVOKE.ConvertFieldValueToMap(FieldValueProxy.getCPtr(fieldValue)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy ConvertMapToFieldValue(FieldToValueMap wrapper) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.ConvertMapToFieldValue(FieldToValueMap.getCPtr(wrapper)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy ConvertSnapshotToFieldValue(DocumentSnapshotProxy snapshot, DocumentSnapshotProxy.ServerTimestampBehavior stb) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.ConvertSnapshotToFieldValue(DocumentSnapshotProxy.getCPtr(snapshot), (int)stb), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteBatchUpdate(WriteBatchProxy batch, DocumentReferenceProxy doc, FieldValueProxy fieldValue) {
    FirestoreCppPINVOKE.WriteBatchUpdate__SWIG_0(WriteBatchProxy.getCPtr(batch), DocumentReferenceProxy.getCPtr(doc), FieldValueProxy.getCPtr(fieldValue));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBatchUpdate(WriteBatchProxy batch, DocumentReferenceProxy doc, FieldToValueMap wrapper) {
    FirestoreCppPINVOKE.WriteBatchUpdate__SWIG_1(WriteBatchProxy.getCPtr(batch), DocumentReferenceProxy.getCPtr(doc), FieldToValueMap.getCPtr(wrapper));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBatchUpdate(WriteBatchProxy batch, DocumentReferenceProxy doc, FieldPathToValueMap wrapper) {
    FirestoreCppPINVOKE.WriteBatchUpdate__SWIG_2(WriteBatchProxy.getCPtr(batch), DocumentReferenceProxy.getCPtr(doc), FieldPathToValueMap.getCPtr(wrapper));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

  public static System.Threading.Tasks.Task DocumentReferenceSetAsync(DocumentReferenceProxy doc, FieldValueProxy fieldValue, SetOptionsProxy options) {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.DocumentReferenceSet(DocumentReferenceProxy.getCPtr(doc), FieldValueProxy.getCPtr(fieldValue), SetOptionsProxy.getCPtr(options)), true));
    
    return ret;
  }

  public static System.Threading.Tasks.Task DocumentReferenceUpdateAsync(DocumentReferenceProxy doc, FieldValueProxy fieldValue) {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.DocumentReferenceUpdate__SWIG_0(DocumentReferenceProxy.getCPtr(doc), FieldValueProxy.getCPtr(fieldValue)), true));
    
    return ret;
  }

  public static System.Threading.Tasks.Task DocumentReferenceUpdateAsync(DocumentReferenceProxy doc, FieldPathToValueMap wrapper) {
    System.Threading.Tasks.Task ret = Future_FirestoreVoid.GetTask(
        new Future_FirestoreVoid(FirestoreCppPINVOKE.DocumentReferenceUpdate__SWIG_1(DocumentReferenceProxy.getCPtr(doc), FieldPathToValueMap.getCPtr(wrapper)), true));
    
    return ret;
  }

  public static QueryProxy QueryWhereArrayContainsAny(QueryProxy query, string field, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryWhereArrayContainsAny__SWIG_0(QueryProxy.getCPtr(query), field, FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryWhereArrayContainsAny(QueryProxy query, FieldPathProxy field, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryWhereArrayContainsAny__SWIG_1(QueryProxy.getCPtr(query), FieldPathProxy.getCPtr(field), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryWhereIn(QueryProxy query, string field, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryWhereIn__SWIG_0(QueryProxy.getCPtr(query), field, FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryWhereIn(QueryProxy query, FieldPathProxy field, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryWhereIn__SWIG_1(QueryProxy.getCPtr(query), FieldPathProxy.getCPtr(field), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryWhereNotIn(QueryProxy query, string field, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryWhereNotIn__SWIG_0(QueryProxy.getCPtr(query), field, FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryWhereNotIn(QueryProxy query, FieldPathProxy field, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryWhereNotIn__SWIG_1(QueryProxy.getCPtr(query), FieldPathProxy.getCPtr(field), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryStartAt(QueryProxy query, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryStartAt(QueryProxy.getCPtr(query), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryStartAfter(QueryProxy query, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryStartAfter(QueryProxy.getCPtr(query), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryEndBefore(QueryProxy query, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryEndBefore(QueryProxy.getCPtr(query), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QueryProxy QueryEndAt(QueryProxy query, FieldValueProxy values) {
    QueryProxy ret = new QueryProxy(FirestoreCppPINVOKE.QueryEndAt(QueryProxy.getCPtr(query), FieldValueProxy.getCPtr(values)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteBatchSet(WriteBatchProxy writeBatch, DocumentReferenceProxy document, FieldValueProxy data, SetOptionsProxy options) {
    FirestoreCppPINVOKE.WriteBatchSet(WriteBatchProxy.getCPtr(writeBatch), DocumentReferenceProxy.getCPtr(document), FieldValueProxy.getCPtr(data), SetOptionsProxy.getCPtr(options));
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FieldValueVector ConvertFieldValueToVector(FieldValueProxy value) {
    FieldValueVector ret = new FieldValueVector(FirestoreCppPINVOKE.ConvertFieldValueToVector(FieldValueProxy.getCPtr(value)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy ConvertVectorToFieldValue(FieldValueVector wrapper) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.ConvertVectorToFieldValue(FieldValueVector.getCPtr(wrapper)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy FieldValueArrayUnion(FieldValueVector wrapper) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueArrayUnion(FieldValueVector.getCPtr(wrapper)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FieldValueProxy FieldValueArrayRemove(FieldValueVector wrapper) {
    FieldValueProxy ret = new FieldValueProxy(FirestoreCppPINVOKE.FieldValueArrayRemove(FieldValueVector.getCPtr(wrapper)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocumentSnapshotVector QuerySnapshotDocuments(QuerySnapshotProxy snapshot) {
    DocumentSnapshotVector ret = new DocumentSnapshotVector(FirestoreCppPINVOKE.QuerySnapshotDocuments(QuerySnapshotProxy.getCPtr(snapshot)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DocumentChangeVector QuerySnapshotDocumentChanges(QuerySnapshotProxy snapshot, MetadataChangesProxy metadataChanges) {
    DocumentChangeVector ret = new DocumentChangeVector(FirestoreCppPINVOKE.QuerySnapshotDocumentChanges(QuerySnapshotProxy.getCPtr(snapshot), (int)metadataChanges), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SetOptionsProxy SetOptionsMergeFieldPaths(FieldPathVector fields) {
    SetOptionsProxy ret = new SetOptionsProxy(FirestoreCppPINVOKE.SetOptionsMergeFieldPaths(FieldPathVector.getCPtr(fields)), true);
    if (FirestoreCppPINVOKE.SWIGPendingException.Pending) throw FirestoreCppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}